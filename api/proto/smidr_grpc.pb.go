// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: api/proto/smidr.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Smidr_StartBuild_FullMethodName     = "/smidr.v1.Smidr/StartBuild"
	Smidr_GetBuildStatus_FullMethodName = "/smidr.v1.Smidr/GetBuildStatus"
	Smidr_StreamLogs_FullMethodName     = "/smidr.v1.Smidr/StreamLogs"
	Smidr_ListArtifacts_FullMethodName  = "/smidr.v1.Smidr/ListArtifacts"
	Smidr_CancelBuild_FullMethodName    = "/smidr.v1.Smidr/CancelBuild"
	Smidr_ListBuilds_FullMethodName     = "/smidr.v1.Smidr/ListBuilds"
)

// SmidrClient is the client API for Smidr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Smidr service provides build orchestration and artifact management
type SmidrClient interface {
	// StartBuild initiates a new build with the provided configuration
	StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*BuildStatus, error)
	// GetBuildStatus retrieves the current status of a build
	GetBuildStatus(ctx context.Context, in *BuildStatusRequest, opts ...grpc.CallOption) (*BuildStatus, error)
	// StreamLogs streams build logs in real-time
	StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error)
	// ListArtifacts lists all artifacts from a completed build
	ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ArtifactsList, error)
	// CancelBuild cancels a running build
	CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*CancelResult, error)
	// ListBuilds lists all builds (active and completed)
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*BuildsList, error)
}

type smidrClient struct {
	cc grpc.ClientConnInterface
}

func NewSmidrClient(cc grpc.ClientConnInterface) SmidrClient {
	return &smidrClient{cc}
}

func (c *smidrClient) StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*BuildStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildStatus)
	err := c.cc.Invoke(ctx, Smidr_StartBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smidrClient) GetBuildStatus(ctx context.Context, in *BuildStatusRequest, opts ...grpc.CallOption) (*BuildStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildStatus)
	err := c.cc.Invoke(ctx, Smidr_GetBuildStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smidrClient) StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Smidr_ServiceDesc.Streams[0], Smidr_StreamLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLogsRequest, LogLine]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Smidr_StreamLogsClient = grpc.ServerStreamingClient[LogLine]

func (c *smidrClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ArtifactsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArtifactsList)
	err := c.cc.Invoke(ctx, Smidr_ListArtifacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smidrClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*CancelResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelResult)
	err := c.cc.Invoke(ctx, Smidr_CancelBuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smidrClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*BuildsList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildsList)
	err := c.cc.Invoke(ctx, Smidr_ListBuilds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmidrServer is the server API for Smidr service.
// All implementations must embed UnimplementedSmidrServer
// for forward compatibility.
//
// Smidr service provides build orchestration and artifact management
type SmidrServer interface {
	// StartBuild initiates a new build with the provided configuration
	StartBuild(context.Context, *StartBuildRequest) (*BuildStatus, error)
	// GetBuildStatus retrieves the current status of a build
	GetBuildStatus(context.Context, *BuildStatusRequest) (*BuildStatus, error)
	// StreamLogs streams build logs in real-time
	StreamLogs(*StreamLogsRequest, grpc.ServerStreamingServer[LogLine]) error
	// ListArtifacts lists all artifacts from a completed build
	ListArtifacts(context.Context, *ListArtifactsRequest) (*ArtifactsList, error)
	// CancelBuild cancels a running build
	CancelBuild(context.Context, *CancelBuildRequest) (*CancelResult, error)
	// ListBuilds lists all builds (active and completed)
	ListBuilds(context.Context, *ListBuildsRequest) (*BuildsList, error)
	mustEmbedUnimplementedSmidrServer()
}

// UnimplementedSmidrServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSmidrServer struct{}

func (UnimplementedSmidrServer) StartBuild(context.Context, *StartBuildRequest) (*BuildStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBuild not implemented")
}
func (UnimplementedSmidrServer) GetBuildStatus(context.Context, *BuildStatusRequest) (*BuildStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildStatus not implemented")
}
func (UnimplementedSmidrServer) StreamLogs(*StreamLogsRequest, grpc.ServerStreamingServer[LogLine]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedSmidrServer) ListArtifacts(context.Context, *ListArtifactsRequest) (*ArtifactsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedSmidrServer) CancelBuild(context.Context, *CancelBuildRequest) (*CancelResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBuild not implemented")
}
func (UnimplementedSmidrServer) ListBuilds(context.Context, *ListBuildsRequest) (*BuildsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilds not implemented")
}
func (UnimplementedSmidrServer) mustEmbedUnimplementedSmidrServer() {}
func (UnimplementedSmidrServer) testEmbeddedByValue()               {}

// UnsafeSmidrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmidrServer will
// result in compilation errors.
type UnsafeSmidrServer interface {
	mustEmbedUnimplementedSmidrServer()
}

func RegisterSmidrServer(s grpc.ServiceRegistrar, srv SmidrServer) {
	// If the following call pancis, it indicates UnimplementedSmidrServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Smidr_ServiceDesc, srv)
}

func _Smidr_StartBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmidrServer).StartBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Smidr_StartBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmidrServer).StartBuild(ctx, req.(*StartBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smidr_GetBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmidrServer).GetBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Smidr_GetBuildStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmidrServer).GetBuildStatus(ctx, req.(*BuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smidr_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SmidrServer).StreamLogs(m, &grpc.GenericServerStream[StreamLogsRequest, LogLine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Smidr_StreamLogsServer = grpc.ServerStreamingServer[LogLine]

func _Smidr_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmidrServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Smidr_ListArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmidrServer).ListArtifacts(ctx, req.(*ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smidr_CancelBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmidrServer).CancelBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Smidr_CancelBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmidrServer).CancelBuild(ctx, req.(*CancelBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smidr_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmidrServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Smidr_ListBuilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmidrServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Smidr_ServiceDesc is the grpc.ServiceDesc for Smidr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Smidr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smidr.v1.Smidr",
	HandlerType: (*SmidrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartBuild",
			Handler:    _Smidr_StartBuild_Handler,
		},
		{
			MethodName: "GetBuildStatus",
			Handler:    _Smidr_GetBuildStatus_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _Smidr_ListArtifacts_Handler,
		},
		{
			MethodName: "CancelBuild",
			Handler:    _Smidr_CancelBuild_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _Smidr_ListBuilds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _Smidr_StreamLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/smidr.proto",
}
