name: Multi-Layer Combination Tests

on:
  workflow_dispatch:
    inputs:
      force_clean_build:
        description: "Force image regeneration (rootfs + image tasks only, reuses packages)"
        required: false
        type: boolean
        default: false

  schedule:
    # Weekly on Saturdays at 04:00 UTC
    - cron: "0 4 * * 6"

jobs:
  test-layer-combinations:
    runs-on: self-hosted
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Basic Poky"
            file: "smidr-ci.yaml"
            customer: "ci"
          - name: "Toradex BSP"
            file: "smidr-toradex-ci.yaml"
            customer: "ci-toradex"
          - name: "Raspberry Pi BSP"
            file: "smidr-raspberrypi-ci.yaml"
            customer: "ci-raspberrypi"
          - name: "Intel BSP"
            file: "smidr-intel-ci.yaml"
            customer: "ci-intel"

    name: ${{ matrix.config.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25.1"

      - name: Go build
        run: go build -v ./...

      - name: Ensure Docker is available
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker not found on self-hosted runner" >&2
            exit 1
          fi
          docker info

      - name: Run build for ${{ matrix.config.name }}
        env:
          YOCTO_DL_DIR: ~/.smidr/downloads
          YOCTO_SSTATE_DIR: ~/.smidr/sstate
          YOCTO_TMP_DIR: ~/.smidr/tmp
          YOCTO_DEPLOY_DIR: ~/.smidr/deploy
        run: |
          # Note: Sstate-only builds (100% cache hit) will not generate deploy artifacts
          # This validates build reproducibility and layer compatibility
          # Use workflow input 'force_clean_build' to generate artifacts on first run
          echo "Testing layer combination: ${{ matrix.config.name }}"

          CLEAN_FLAG=""
          if [ "${{ github.event.inputs.force_clean_build }}" = "true" ]; then
            echo "ðŸ§¹ Force image regeneration requested - will rebuild rootfs and image only"
            CLEAN_FLAG="--clean-image"
          fi

          go run ./cmd/smidr --config ${{ matrix.config.file }} build --customer ${{ matrix.config.customer }} $CLEAN_FLAG


      - name: List artifacts
        if: always()
        run: |
          echo "=== Artifacts for ${{ matrix.config.name }} ==="
          find ~/.smidr/artifacts/artifact-${{ matrix.config.customer }} -type f 2>/dev/null | head -20 || echo "No artifacts found"

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.customer }}-build-logs
          path: |
            ~/.smidr/builds/build-${{ matrix.config.customer }}/**/build-log.txt
            ~/.smidr/builds/build-${{ matrix.config.customer }}/**/build-log.jsonl
          if-no-files-found: warn

      - name: Upload deploy artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.customer }}-deploy
          path: |
            ~/.smidr/artifacts/artifact-${{ matrix.config.customer }}/**/*
          if-no-files-found: warn

  summary:
    needs: test-layer-combinations
    runs-on: self-hosted
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "## Layer Combination Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tested the following layer combinations:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Basic Poky (poky + meta-openembedded)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Toradex BSP (NXP/Freescale + Toradex layers)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Raspberry Pi BSP (meta-raspberrypi)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Intel BSP (meta-intel + networking/python)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Notes" >> $GITHUB_STEP_SUMMARY
          echo "- Builds completing with 100% sstate cache validate layer compatibility and reproducibility" >> $GITHUB_STEP_SUMMARY
          echo "- No deploy artifacts generated for sstate-only builds (expected behavior)" >> $GITHUB_STEP_SUMMARY
          echo "- Use \`--clean\` flag to force fresh build and artifact generation" >> $GITHUB_STEP_SUMMARY
