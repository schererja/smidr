package cli

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
)

var initCmd = &cobra.Command{
	Use:   "init [project-name]",
	Short: "Initialize a new Smidr project",
	Long:  ` Create a new Smidr project with the specified name with the template configuration`,
	Args:  cobra.MaximumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectName := "my-smidr-project"
		if len(args) == 1 {
			projectName = args[0]
		}
		if err := initProject(projectName); err != nil {
			fmt.Println("Error initializing project:", err)
			return
		}
	},
}

func init() {
	rootCmd.AddCommand(initCmd)
}

func initProject(projectName string) error {
	configPath := "smidr.yaml"
	if _, err := os.Stat(configPath); err == nil {
		return fmt.Errorf("configuration file %s already exists", configPath)
	}

	// Create the template file
	template := generateConfigTemplate(projectName)
	if err := os.WriteFile(configPath, []byte(template), 0644); err != nil {
		return fmt.Errorf("failed to write configuration file: %w", err)
	}
	fmt.Printf("‚úÖ Initialized Smidr project: %s\n", projectName)
	fmt.Println("üìù Edit smidr.yaml to configure your build")
	fmt.Println("üöÄ Run 'smidr build' to start building")
	return nil
}

func generateConfigTemplate(projectName string) string {
	return fmt.Sprintf(`# Smidr Build Configuration
  # Generated by 'smidr init %s'

  name: %s
  description: "Custom embedded Linux image"

  # Base system configuration
  base:
    provider: toradex
    machine: verdin-imx8mp
    distro: tdx-xwayland
    version: "6.0.0"

  # Layer configuration
  layers:
    # BSP layers (automatically managed)
    - name: meta-toradex-bsp-common
      git: https://git.toradex.com/meta-toradex-bsp-common
      branch: kirkstone-6.x.y

    # Custom layers (your application code)
    # - name: meta-mycompany
    #   path: ./layers/meta-mycompany
    #
    # - name: meta-myapp
    #   git: https://github.com/mycompany/meta-myapp
    #   branch: main

  # Build configuration
  build:
    image: core-image-weston
    machine: verdin-imx8mp

    # Extra packages to include
    extra_packages:
      - python3
      - nodejs
      - vim

    # Build options
    parallel_make: 8
    bb_number_threads: 8

  # Output artifacts to extract
  artifacts:
    - "*.wic"           # Disk images
    - "*.tar.bz2"       # Root filesystem archives
    - "*-sdk-*.sh"      # SDK installers

  # Directory configuration (all default to ~/.smidr/*)
  directories:
    downloads: ~/.smidr/downloads
    sstate: ~/.smidr/sstate-cache
    tmp: ~/.smidr/tmp
    build: ~/.smidr/build
    deploy: ~/.smidr/deploy
    source: ~/.smidr/sources

  # Container configuration
  container:
    # Base image for builds (using official Yocto project image)
    base_image: "crops/yocto:ubuntu-22.04-base"

    # Resource limits
    memory: "8g"
    cpu_count: 8

  # Cache configuration
  cache:
    # Shared cache locations (defaults to ~/.smidr)
    downloads: ~/.smidr/downloads
    sstate: ~/.smidr/sstate-cache

    # Cache retention (days)
    retention: 30
  `, projectName, projectName)
}
